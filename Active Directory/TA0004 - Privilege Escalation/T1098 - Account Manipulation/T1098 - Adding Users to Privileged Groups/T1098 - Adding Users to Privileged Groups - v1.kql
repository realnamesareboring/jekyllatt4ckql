// Below are some references on Well Known SIDs for this query to pick up on. Also, there is another link on specific EventIDs that are recommended to monitor
// https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-identifiers#well-known-sids
// https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/plan/appendix-l--events-to-monitor
let WellKnownLocalSID = "S-1-5-32-5[0-9][0-9]$";
let WellKnownGroupSID = "S-1-5-21-[0-9]*-[0-9]*-[0-9]*-5[0-9][0-9]$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1102$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1103$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-498$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1000$";
let AddEvents = SecurityEvent
| where EventID in (4728, 4732, 4756) // Event ID for adding a user to a group
| extend TimeGeneratedAddEvents = TimeGenerated
| extend ParsedXML = parse_xml(EventData)
| extend MemberName = tostring(ParsedXML.EventData.Data[0]["#text"])
| extend MemberSID = tostring(ParsedXML.EventData.Data[1]["#text"])
| extend TargetUserName = tostring(ParsedXML.EventData.Data[2]["#text"])
| extend TargetDomainName = tostring(ParsedXML.EventData.Data[3]["#text"])
| extend TargetSID = tostring(ParsedXML.EventData.Data[4]["#text"])
| extend SubjectUserSID = tostring(ParsedXML.EventData.Data[5]["#text"])
| extend SubjectUserName = tostring(ParsedXML.EventData.Data[6]["#text"])
| extend SubjectDomainName = tostring(ParsedXML.EventData.Data[7]["#text"])
| extend SubjectLogonId = tostring(ParsedXML.EventData.Data[8]["#text"])
| extend PrivilegeList = tostring(ParsedXML.EventData.Data[9]["#text"])
| where MemberSID matches regex WellKnownGroupSID or TargetSID matches regex WellKnownGroupSID or SubjectUserSID matches regex WellKnownGroupSID
| project TimeGenerated, MemberName, MemberSID, TargetUserName, TargetSID, SubjectUserName, SubjectUserSID, EventID, Computer;
let RemoveEvents = SecurityEvent
| where EventID in (4729, 4733, 4757) // Event ID for removing a user from a group
| extend TimeGeneratedRemoveEvents = TimeGenerated
| extend ParsedXML = parse_xml(EventData)
| extend MemberName = tostring(ParsedXML.EventData.Data[0]["#text"])
| extend MemberSID = tostring(ParsedXML.EventData.Data[1]["#text"])
| extend TargetUserName = tostring(ParsedXML.EventData.Data[2]["#text"])
| extend TargetDomainName = tostring(ParsedXML.EventData.Data[3]["#text"])
| extend TargetSID = tostring(ParsedXML.EventData.Data[4]["#text"])
| extend SubjectUserSID = tostring(ParsedXML.EventData.Data[5]["#text"])
| extend SubjectUserName = tostring(ParsedXML.EventData.Data[6]["#text"])
| extend SubjectDomainName = tostring(ParsedXML.EventData.Data[7]["#text"])
| extend SubjectLogonId = tostring(ParsedXML.EventData.Data[8]["#text"])
| extend PrivilegeList = tostring(ParsedXML.EventData.Data[9]["#text"])
| where MemberSID matches regex WellKnownGroupSID or TargetSID matches regex WellKnownGroupSID or SubjectUserSID matches regex WellKnownGroupSID
| project TimeGenerated, MemberName, MemberSID, TargetUserName, TargetSID, SubjectUserName, SubjectUserSID, EventID, Computer;
AddEvents
| join kind=inner (RemoveEvents) on MemberSID
| where TimeGenerated - TimeGenerated1 < 1d
| project AddTime = TimeGenerated, AddEventID = EventID, RemoveTime = TimeGenerated1, RemoveEventID = EventID1, Computer, TargetAccount = MemberName, ActorAccount = SubjectUserName, TargetGroup = TargetUserName, TargetSID = MemberSID, GroupSID = TargetSID, ActorSID = SubjectUserSID